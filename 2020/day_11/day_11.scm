(import (chicken io)
        (chicken process-context))

(define (import-input path)
  (list->vector (map list->vector (map string->list (read-lines (open-input-file path))))))

(define (copy-world input H W)
  (let ((output (make-vector H)))
    (do ((i 0 (+ i 1))) ((= i H))
      (vector-set! output i (make-vector W))
      (do ((j 0 (+ j 1))) ((= j W))
        (vector-set! (vector-ref output i) j (vector-ref (vector-ref input i) j))))
    output))

(define (count-occupied input H W)
  (set! cnt 0)
  (do ((i 0 (+ i 1))) ((= i H))
    (do ((j 0 (+ j 1))) ((= j W))
      (case (vector-ref (vector-ref input i) j)
        ((#\#) (set! cnt (+ cnt 1))))))
  cnt)

(define (count-neighbors/1 input i j H W)
  (set! cnt 0)
  (do ((a -1 (+ a 1))) ((= a 2))
    (do ((b -1 (+ b 1))) ((= b 2))
      (when (and (or (not (= a 0))
                     (not (= b 0)))
                 (< -1 (+ i a) H)
                 (< -1 (+ j b) W))
        (case (vector-ref (vector-ref input (+ i a)) (+ j b))
          ((#\#) (set! cnt (+ cnt 1)))))))
  cnt)

(define (count-neighbors/2 input i j H W)
  (set! cnt 0)
  (do ((a -1 (+ a 1))) ((= a 2))
    (do ((b -1 (+ b 1))) ((= b 2))
      (when (or (not (= a 0))
                (not (= b 0)))
        (set! cnt (call/cc
                    (lambda (return)
                      (do ((x (+ i a) (+ x a))
                           (y (+ j b) (+ y b)))
                        ((not (and (< -1 x H)
                                   (< -1 y W)))
                         (return cnt))
                        (case (vector-ref (vector-ref input x) y)
                          ((#\#) (return (+ cnt 1)))
                          ((#\L) (return cnt))))))))))
  cnt)

(define (iterate-world proc setting input output H W)
  (do ((i 0 (+ i 1))) ((= i H))
    (do ((j 0 (+ j 1))) ((= j W))
      (let ((cnt (proc input i j H W)))
        (vector-set! (vector-ref output i) j (vector-ref (vector-ref input i) j))
        (case (vector-ref (vector-ref input i) j)
          ((#\#) (when (> cnt setting) (vector-set! (vector-ref output i) j #\L)))
          ((#\L) (when (= cnt       0) (vector-set! (vector-ref output i) j #\#))))))))

(define (solve proc setting input H W)
  (let solve/h ((a (copy-world input H W))
                (b (copy-world input H W)))
    (iterate-world proc setting a b H W)
    (if (equal? a b)
        (print (count-occupied a H W))
        (solve/h b a))))

(let ((path (car (command-line-arguments))))
  (let* ((input (import-input path))
         (H (vector-length input)) (W (vector-length (vector-ref input 0))))
    (solve count-neighbors/1 3 input H W)
    (solve count-neighbors/2 4 input H W)))
