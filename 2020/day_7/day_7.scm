(import (chicken io)
        (chicken process-context)
        (chicken irregex)
        (srfi 69))

(import (chicken sort))

(define (parse-line line)
  (map
    (lambda (str)
      (let ((match (irregex-match "^([0-9]*) ?(.*)$" str)))
        (let* ((num (irregex-match-substring match 1))
               (col (irregex-match-substring match 2))
               (num (let ((tmp (string->number num)))
                      (if tmp tmp 1))))
          (list num col))))
    (irregex-split "(, | contain | bags?|\\.)" line)))

(define (import-input path)
  (let ((hash (make-hash-table)))
    (for-each
      (lambda (lst)
        (let ((key (cadar lst))
              (val (let ((tmp (make-hash-table)))
                     (for-each
                       (lambda (lst)
                         (let ((key (cadr lst))
                               (val (car  lst)))
                           (unless (string=? key "no other")
                             (hash-table-set! tmp key val))))
                       (cdr lst))
                     tmp)))
          (hash-table-set! hash key val)))
      (map parse-line (read-lines (open-input-file path))))
    hash))

(define (solve/1 input color)
  (let ((can-contain (make-hash-table)))
    (hash-table-set! can-contain color 0)
    (let loop ()
      (let ((can-contain-keys (hash-table-keys can-contain)))
        (for-each
          (lambda (can-contain-key)
            (for-each
              (lambda (input-key)
                (let ((query (hash-table-ref/default (hash-table-ref input input-key) can-contain-key (list))))
                  (unless (null? query)
                    (hash-table-set! can-contain input-key 0))))
              (hash-table-keys input)))
          can-contain-keys)
        (unless (equal? can-contain-keys (hash-table-keys can-contain))
          (loop))))
    (display (sub1 (length (hash-table-keys can-contain))))
    (newline)))

(define (solve/2 input color)
  (set! cnt 0)
  (let ((to-check (make-hash-table)))
    (hash-table-set! to-check color 1)
    (let loop ()
      (let ((to-check-keys (sort (hash-table-keys to-check) string<?)))
        (for-each
          (lambda (to-check-key)
            (let ((value (hash-table-ref to-check to-check-key))
                  (check (hash-table-ref input    to-check-key)))
              (set! cnt (+ cnt value))
              (unless (null? (hash-table-keys check))
                (for-each
                  (lambda (check-key)
                    (let ((new-value (* value (hash-table-ref check check-key))))
                      (hash-table-set! to-check check-key (+ new-value (hash-table-ref/default to-check check-key 0)))))
                  (hash-table-keys check)))
              (hash-table-delete! to-check to-check-key)))
          to-check-keys)
        (unless (null? to-check-keys)
          (loop)))))
  (display (sub1 cnt))
  (newline))

(let ((path (car (command-line-arguments))))
  (let ((input (import-input path)))
    (solve/1 input "shiny gold")
    (solve/2 input "shiny gold")))
