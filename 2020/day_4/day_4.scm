(import (srfi 69)
        (srfi 1)
        (chicken io)
        (chicken process-context)
        (chicken string)
        (chicken irregex))

(define (import-input path)
  (call-with-input-file path
    (lambda (port)
      (let import-input/h ((line (read-line port)) (acc (list)) (hash (make-hash-table)))
        (cond ((eof-object? line)
               (cons hash acc))
              ((zero? (string-length line))
               (import-input/h (read-line port) (cons hash acc) (make-hash-table)))
              (else
                (for-each
                  (lambda (lst)
                    (hash-table-set! hash (car lst) (cadr lst)))
                  (map
                    (lambda (str)
                      (string-split str ":"))
                    (string-split line " ")))
                (import-input/h (read-line port) acc hash)))))))

(define (is-valid/1? hash)
  (let* ((keys (hash-table-keys hash))
         (len  (length keys)))
    (or (and (= 7 len)
             (not (member "cid" keys)))
        (= 8 len))))

(define (is-valid/2? hash)
  (define (get key)
    (hash-table-ref/default hash key (list)))
  (let ((byr (get "byr"))
        (iyr (get "iyr"))
        (eyr (get "eyr"))
        (hgt (get "hgt"))
        (hcl (get "hcl"))
        (ecl (get "ecl"))
        (pid (get "pid")))
    (and (not (member (list) (list byr iyr eyr hgt hcl ecl pid)))
         (let ((byr (string->number byr)))
           (and (>= byr 1920) (<= byr 2002)))
         (let ((iyr (string->number iyr)))
           (and (>= iyr 2010) (<= iyr 2020)))
         (let ((eyr (string->number eyr)))
           (and (>= eyr 2020) (<= eyr 2030)))
         (let ((match (irregex-match "([0-9]+)(cm|in)" hgt)))
           (if (irregex-match-data? match)
               (let ((unt (irregex-match-substring match 2))
                     (hgt (string->number (irregex-match-substring match 1))))
                 (cond ((string=? unt "cm")
                        (and (>= hgt 150) (<= hgt 193)))
                       ((string=? unt "in")
                        (and (>= hgt  59) (<= hgt  76)))
                       (else #f)))
               #f))
         (member ecl (list "amb" "blu" "brn" "gry" "grn" "hzl" "oth"))
         (irregex-match? "#[0-9a-f]{6}" hcl)
         (irregex-match? "[0-9]{9}"     pid))))

(define (solve proc input)
  (display (length (filter
                     (lambda (hash)
                       (proc hash))
                     input)))
  (newline))

(let ((args (command-line-arguments)))
  (let ((input (import-input (car args))))
    (solve is-valid/1? input)
    (solve is-valid/2? input)))
