(import (chicken io)
        (chicken irregex)
        (chicken process-context)
        (chicken string)
        (srfi 1)
        (srfi 69))

(define (import-input path)
  (map
    (lambda (str)
      (let ((hash (make-hash-table)))
        (for-each
          (lambda (lst)
            (hash-table-set! hash (car lst) (cadr lst)))
          (map
            (lambda (str)
              (string-split str ":"))
            (string-split str)))
        hash))
    (irregex-split "\n\n" (read-string #f (open-input-file path)))))

(define (is-valid/1? hash)
  (call/cc
    (lambda (return)
      (for-each
        (lambda (key)
          (when (null? (hash-table-ref/default hash key (list)))
            (return #f)))
        (list "byr" "iyr" "eyr" "hgt" "hcl" "ecl" "pid")))))

(define (is-valid/2? hash)
  (define (in-range? num low high)
    (<= low num high))
  (call/cc
    (lambda (return)
      (letrec* ((get
                  (lambda (key)
                    (let ((res (hash-table-ref/default hash key (list))))
                      (if (null? res)
                          (return #f)
                          res))))
                (byr (get "byr"))
                (iyr (get "iyr"))
                (eyr (get "eyr"))
                (hgt (get "hgt"))
                (hcl (get "hcl"))
                (ecl (get "ecl"))
                (pid (get "pid")))
        (and (in-range? (string->number byr) 1920 2002)
             (in-range? (string->number iyr) 2010 2020)
             (in-range? (string->number eyr) 2020 2030)
             (let ((match (irregex-match "([0-9]+)(cm|in)" hgt)))
               (if (irregex-match-data? match)
                   (let* ((unt (irregex-match-substring match 2))
                          (hgt (irregex-match-substring match 1))
                          (hgt (string->number hgt)))
                     (cond ((string=? unt "cm") (in-range? hgt 150 193))
                           ((string=? unt "in") (in-range? hgt   59 76))
                           (else #f)))
                   #f))
             (irregex-match? "#[0-9a-f]{6}"                hcl)
             (irregex-match? "amb|blu|brn|gry|grn|hzl|oth" ecl)
             (irregex-match? "[0-9]{9}"                    pid))))))

(define (solve proc input)
  (display (length (filter proc input)))
  (newline))

(let ((args (command-line-arguments)))
  (let ((input (import-input (car args))))
    (solve is-valid/1? input)
    (solve is-valid/2? input)))
