(import (chicken io)
        (chicken irregex)
        (chicken process-context)
        (chicken string)
        (srfi 1)
        (srfi 69))

(define (import-input path)
  (call-with-input-file path
    (lambda (port)
      (let import-input/h ((line (read-line port)) (acc (list)) (hash (make-hash-table)))
        (cond ((eof-object? line)
               (cons hash acc))
              ((zero? (string-length line))
               (import-input/h (read-line port) (cons hash acc) (make-hash-table)))
              (else
                (for-each
                  (lambda (lst)
                    (hash-table-set! hash (car lst) (cadr lst)))
                  (map
                    (lambda (str)
                      (string-split str ":"))
                    (string-split line " ")))
                (import-input/h (read-line port) acc hash)))))))

(define (is-valid/1? hash)
  (let* ((keys (hash-table-keys hash))
         (len  (length keys)))
    (or (and (= 7 len)
             (not (member "cid" keys)))
        (= 8 len))))

(define (is-valid/2? hash)
  (define (in-range? num low high)
    (and (>= num  low)
         (<= num high)))
  (letrec* ((get
              (lambda (key)
                (hash-table-ref/default hash key (list))))
            (byr (get "byr"))
            (iyr (get "iyr"))
            (eyr (get "eyr"))
            (hgt (get "hgt"))
            (hcl (get "hcl"))
            (ecl (get "ecl"))
            (pid (get "pid")))
    (and (not (member (list) (list byr iyr eyr hgt hcl ecl pid)))
         (in-range? (string->number byr) 1920 2002)
         (in-range? (string->number iyr) 2010 2020)
         (in-range? (string->number eyr) 2020 2030)
         (let ((match (irregex-match "([0-9]+)(cm|in)" hgt)))
           (if (irregex-match-data? match)
               (let ((unt (irregex-match-substring match 2))
                     (hgt (string->number (irregex-match-substring match 1))))
                 (cond ((string=? unt "cm") (in-range? hgt 150 193))
                       ((string=? unt "in") (in-range? hgt   59 76))
                       (else #f)))
               #f))
         (irregex-match? "#[0-9a-f]{6}"                  hcl)
         (irregex-match? "(amb|blu|brn|gry|grn|hzl|oth)" ecl)
         (irregex-match? "[0-9]{9}"                      pid))))

(define (solve proc input)
  (display (length (filter proc input)))
  (newline))

(let ((args (command-line-arguments)))
  (let ((input (import-input (car args))))
    (solve is-valid/1? input)
    (solve is-valid/2? input)))
