(import (chicken io)
        (chicken string)
        (chicken process-context)
        (matchable)
        (srfi 69))

(define (import-input path)
  (list->vector (map
                  (lambda (str)
                    (match (string-split str)
                           ((operator argument)
                            (list (string->symbol operator)
                                  (string->number argument)))))
                  (read-lines (open-input-file path)))))

(define (run-program input)
  (let ((limit (vector-length input)) (history (make-hash-table)))
    (let run-program/h ((pointer 0) (accumulator 0))
      (if (or (hash-table-exists? history pointer) (= pointer limit))
          (list accumulator pointer)
          (begin
            (hash-table-set! history pointer 0)
            (match (vector-ref input pointer)
              (`(acc ,num) (run-program/h (+ pointer 1) (+ accumulator num)))
              (`(jmp ,num) (run-program/h (+ pointer num) accumulator))
              (`(nop ,num) (run-program/h (+ pointer 1) accumulator))
              ))))))

(define (solve/1 input)
  (print (car (run-program input))))

(define (solve/2 input)
  (let ((limit (vector-length input)))
    (let solve/2/h ((pointer 0))
      (let ((copy (list->vector (vector->list input))))
        (match (vector-ref input pointer)
          (`(jmp ,num) (vector-set! copy pointer `(nop ,num)))
          (`(nop ,num) (vector-set! copy pointer `(jmp ,num)))
          (_ void))
        (let ((result (run-program copy)))
          (if (= (cadr result) limit)
              (print (car result))
              (solve/2/h (+ 1 pointer))))))))

(let ((path (car (command-line-arguments))))
  (let ((input (import-input path)))
    (solve/1 input)
    (solve/2 input)))
